        # To get net f_ext and tau_ext for each rigid body we use our mapping to get a matrix and then use that to sum forces
        # And then do something a bit more complicated for tau
        for i in rbs:
            map_matrix = map[i] # Gives an m x n matrix where m is # of sites, n is # of springs

            for j in range(max_sites_per_body):
                # Initialize j-th site force to 0
                site_force = vec3(0,0,0)

                # Sum spring forces that apply to this site via the map matrix
                for k in range(n_springs):
                    site_force += map_matrix[j, k] * f_spr[k]
                
                # Accumulate net external force for this rb
                f_ext[i] += site_force

                # Accumulate net external torque
                r = globals[i, j] - rbs[i].state.pos
                tau_ext[i] += tm.cross(r, site_force)

            # Add gravity
            f_ext[i] += rbs[i].mass * g

            # Use net force and torque to compute linear and angular acceleration
            a = f_ext[i] / rbs[i].mass
            alpha = rbs[i].I_t_inv() @ tau_ext[i]

            # Update rigid body state
            rbs[i].state.v += a * dt
            rbs[i].state.w += alpha * dt
            rbs[i].state.pos += rbs[i].state.v * dt
            rbs[i].state.quat = quat_mul(rbs[i].state.quat, quat_exp(.5 * dt * vec4(0, rbs[i].state.w)))

            # Print state: 
            print(f'position: {rbs[i].state.pos:.3f}, orientation: {rbs[i].state.quat:.3f}, linear velocity: {rbs[i].state.v:.3f}, angular velocity: {rbs[i].state.w:.3f}')